<?xml version="1.0"?>

<ruleset
        xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd"
        name="TPI Rules" >
    <description>
        The Ruleset we want to use in the TPI. For a detailed description of pmd rulesets: http://pmd.sourceforge.net/rules/index.html
    </description>
    <exclude-pattern>.*/target/.*</exclude-pattern>
    <exclude-pattern>.*/build/.*</exclude-pattern>

    <!-- Bast Practices Ruleset -->
<!--    <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod" />-->
<!--    <rule ref="category/java/bestpractices.xml/AccessorClassGeneration" />-->
<!--    <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration" />-->
<!--    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidMessageDigestField" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidReassigningCatchVariables" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidStringBufferField" />-->
<!--    <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP" />-->
<!--    <rule ref="category/java/bestpractices.xml/CheckResultSet" />-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/ConstantsInInterface" />&ndash;&gt;-->
<!--    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt" />-->
<!--    <rule ref="category/java/bestpractices.xml/DoubleBraceInitialization" />-->
<!--    <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach" />-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/ForLoopVariableCount" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/GuardLogStatement" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnit5TestShouldBePackagePrivate" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/JUnitUseExpected" />&ndash;&gt;-->
<!--    <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons" />-->
<!--    <rule ref="category/java/bestpractices.xml/LooseCoupling" />-->
<!--    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray" />-->
<!--    <rule ref="category/java/bestpractices.xml/MissingOverride" />-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine" />&ndash;&gt;-->
<!--    <rule ref="category/java/bestpractices.xml/PreserveStackTrace" />-->
<!--    <rule ref="category/java/bestpractices.xml/PrimitiveWrapperInstantiation" />-->
<!--    <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator" />-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/SimplifiableTestAssertion" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/bestpractices.xml/SystemPrintln" />&ndash;&gt;-->
<!--    &lt;!&ndash;   <rule ref="category/java/bestpractices.xml/UnusedAssignment" /> &ndash;&gt;-->
<!--       <rule ref="category/java/bestpractices.xml/UnusedFormalParameter" />-->
<!--    &lt;!&ndash;  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" /> &ndash;&gt;-->
<!--  <rule ref="category/java/bestpractices.xml/UnusedPrivateField" />-->
<!--  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod" />-->
<!--  <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty" />-->
<!--  <rule ref="category/java/bestpractices.xml/UseStandardCharsets" />-->
<!--  <rule ref="category/java/bestpractices.xml/UseTryWithResources" />-->
<!--  <rule ref="category/java/bestpractices.xml/UseVarargs" />-->
<!--  <rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean" />-->

<!--  &lt;!&ndash; Code Style Ruleset &ndash;&gt;-->
<!--    &lt;!&ndash; <rule ref="category/java/codestyle.xml/AtLeastOneConstructor">-->
<!--        <properties>-->
<!--            <property name="ignoredAnnotations"-->
<!--                      value="lombok.Data|lombok.Value|lombok.Builder|lombok.NoArgsConstructor|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|org.springframework.context.annotation.Configuration|org.springframework.web.bind.annotation.RestController" />-->
<!--        </properties>-->
<!--    </rule> &ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/AvoidDollarSigns" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/BooleanGetMethodName" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/CallSuperInConstructor" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/ClassNamingConventions" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/ConfusingTernary" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/ControlStatementBraces" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/EmptyControlStatement" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract" />-->
<!--    <rule ref="category/java/codestyle.xml/ExtendsObject" />-->
<!--    <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/FieldNamingConventions" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/FinalParameterInAbstractMethod" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/GenericsNaming" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches" />-->
<!--    <rule ref="category/java/codestyle.xml/LinguisticNaming" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/LocalHomeNamingConvention" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/LongVariable" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/MethodNamingConventions" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/NoPackage" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/OnlyOneReturn" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/PackageCase" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/PrematureDeclaration" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/ShortClassName" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/ShortMethodName" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/ShortVariable" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/TooManyStaticImports" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/UnnecessaryBoxing" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/UnnecessaryCast" />-->
<!--    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor" />-->
<!--    &lt;!&ndash;  <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName" /> &ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/UnnecessaryImport" />-->
<!--    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn" />-->
<!--    <rule ref="category/java/codestyle.xml/UnnecessaryModifier" />-->
<!--    <rule ref="category/java/codestyle.xml/UnnecessaryReturn" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/UnnecessarySemicolon" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/UseDiamondOperator" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/UselessParentheses" />&ndash;&gt;-->
<!--    <rule ref="category/java/codestyle.xml/UselessQualifiedThis" />-->
<!--    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer" />-->
<!--&lt;!&ndash;    <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals" />&ndash;&gt;-->

<!--    &lt;!&ndash; Design Ruleset &ndash;&gt;-->
<!--    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" />-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/AvoidCatchingGenericException" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts" />&ndash;&gt;-->
<!--    <rule ref="category/java/design.xml/AvoidRethrowingException" />-->
<!--    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />-->
<!--    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />-->
<!--    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes" />-->
<!--    <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures" />-->
<!--    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />-->
<!--    &lt;!&ndash;   <rule ref="category/java/design.xml/CognitiveComplexity" /> >&ndash;&gt;-->
<!--       <rule ref="category/java/design.xml/CollapsibleIfStatements" />-->
<!--   &lt;!&ndash;    <rule ref="category/java/design.xml/CouplingBetweenObjects" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/CyclomaticComplexity" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/DataClass" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/ExceptionAsFlowControl" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/ExcessiveImports" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/ExcessiveParameterList" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/ExcessivePublicCount" />&ndash;&gt;-->
<!--    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic" />-->
<!--    &lt;!&ndash;    <rule ref="category/java/design.xml/GodClass" /> &ndash;&gt;-->
<!--    &lt;!&ndash;    <rule ref="category/java/design.xml/ImmutableField" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/InvalidJavaBean" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/LawOfDemeter" />&ndash;&gt;-->
<!--    <rule ref="category/java/design.xml/LogicInversion" />-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/LoosePackageCoupling" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/MutableStaticState" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/NcssCount" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/NPathComplexity" />&ndash;&gt;-->
<!--    <rule ref="category/java/design.xml/SignatureDeclareThrowsException">-->
<!--        <properties>-->
<!--            <property name="IgnoreJUnitCompletely" value="true" />-->
<!--        </properties>-->
<!--    </rule>-->
<!--    <rule ref="category/java/design.xml/SimplifiedTernary" />-->
<!--    <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />-->
<!--    <rule ref="category/java/design.xml/SimplifyBooleanReturns" />-->
<!--    <rule ref="category/java/design.xml/SimplifyConditional" />-->
<!--    &lt;!&ndash;    <rule ref="category/java/design.xml/SingularField" /> />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/SwitchDensity" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/TooManyFields" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/TooManyMethods" />&ndash;&gt;-->
<!--    <rule ref="category/java/design.xml/UselessOverridingMethod" />-->
<!--&lt;!&ndash;    <rule ref="category/java/design.xml/UseObjectForClearerAPI" />&ndash;&gt;-->

<!--    &lt;!&ndash; Documentation Ruleset &ndash;&gt;-->
<!--    <rule ref="category/java/documentation.xml/CommentContent" />-->
<!--    <rule ref="category/java/documentation.xml/CommentRequired" />-->
<!--    &lt;!&ndash;<rule ref="category/java/documentation.xml/CommentSize" /> &ndash;&gt;-->
<!--    &lt;!&ndash; <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor" /> &ndash;&gt;-->
<!--     <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" />-->

<!--     &lt;!&ndash; Error Prone Ruleset &ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/AssignmentInOperand" />-->
<!--    <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic" />-->
<!--    <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop" />-->
<!--    <rule ref="category/java/errorprone.xml/AvoidCallingFinalize" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/AvoidCatchingNPE" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />-->
<!--    &lt;!&ndash; <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals" /> &ndash;&gt;-->
<!-- &lt;!&ndash;    <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause" />-->
<!--    &lt;!&ndash; <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition" /> >&ndash;&gt;-->
<!--     <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation" />-->
<!--     <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators" />-->
<!--     <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues" />-->
<!--     <rule ref="category/java/errorprone.xml/BrokenNullCheck" />-->
<!-- &lt;!&ndash;    <rule ref="category/java/errorprone.xml/CallSuperFirst" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/CallSuperLast" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/CheckSkipResult" />-->
<!--    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" />-->
<!--    <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic" />-->
<!--    <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />-->
<!--    <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName" />-->
<!--    <rule ref="category/java/errorprone.xml/CloseResource" />-->
<!--    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/ComparisonWithNaN" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod" />-->
<!--    <rule ref="category/java/errorprone.xml/DetachedTestCase" />-->
<!--    <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly" />-->
<!--    <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable" />-->
<!--    <rule ref="category/java/errorprone.xml/DoNotHardCodeSDCard" />-->
<!--    <rule ref="category/java/errorprone.xml/DoNotTerminateVM" />-->
<!--    <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally" />-->
<!--    <rule ref="category/java/errorprone.xml/DontImportSun" />-->
<!--    <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices" />-->
<!--    <rule ref="category/java/errorprone.xml/EmptyCatchBlock" />-->
<!--    <rule ref="category/java/errorprone.xml/EmptyFinalizer" />-->
<!--    <rule ref="category/java/errorprone.xml/EqualsNull" />-->
<!--    <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize" />-->
<!--    <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/FinalizeOverloaded" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/IdempotentOperations" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/InstantiationToGetClass" />-->
<!--    <rule ref="category/java/errorprone.xml/InvalidLogMessageFormat" />-->
<!--    <rule ref="category/java/errorprone.xml/JumbledIncrementer" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/JUnitSpelling" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/JUnitStaticSuite" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass" />-->
<!--    <rule ref="category/java/errorprone.xml/MisplacedNullCheck" />-->
<!--    &lt;!&ndash;  <rule ref="category/java/errorprone.xml/MissingSerialVersionUID" /> >&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass" />-->
<!--    <rule ref="category/java/errorprone.xml/MoreThanOneLogger" />-->
<!--    <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/NonSerializableClass" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/NonStaticInitializer" />-->
<!--    <rule ref="category/java/errorprone.xml/NullAssignment" />-->
<!--    <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode" />-->
<!--    <rule ref="category/java/errorprone.xml/ProperCloneImplementation" />-->
<!--    <rule ref="category/java/errorprone.xml/ProperLogger" />-->
<!--    <rule ref="category/java/errorprone.xml/ReturnEmptyCollectionRatherThanNull" />-->
<!--    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock" />-->
<!--    <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale" />-->
<!--    <rule ref="category/java/errorprone.xml/SingleMethodSingleton" />-->
<!--    <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar" />-->
<!--    <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName" />-->
<!--    <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName" />-->
<!--    <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape" />-->
<!--&lt;!&ndash;    <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases" />&ndash;&gt;-->
<!--    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement" />-->
<!--    <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion" />-->
<!--    <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange" />-->
<!--    <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary" />-->
<!--    <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals" />-->
<!--    <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging" />-->
<!--    <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings" />-->
<!--    <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable" />-->
<!--    <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions" />-->
<!--    <rule ref="category/java/errorprone.xml/UseProperClassLoader" />-->

<!--    &lt;!&ndash; Performance Ruleset &ndash;&gt;-->
<!--    <rule ref="category/java/performance.xml/AddEmptyString" />-->
<!--    <rule ref="category/java/performance.xml/AppendCharacterWithChar" />-->
<!--    <rule ref="category/java/performance.xml/AvoidArrayLoops" />-->
<!--    <rule ref="category/java/performance.xml/AvoidCalendarDateCreation" />-->
<!--    <rule ref="category/java/performance.xml/AvoidFileStream" />-->
<!--    &lt;!&ndash; <rule ref="category/java/performance.xml/AvoidInstantiatingObjectsInLoops" /> >&ndash;&gt;-->
<!--     <rule ref="category/java/performance.xml/BigIntegerInstantiation" />-->
<!--     <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse" />-->
<!--     <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends" />-->
<!--     <rule ref="category/java/performance.xml/InefficientEmptyStringCheck" />-->
<!--     <rule ref="category/java/performance.xml/InefficientStringBuffering" />-->
<!--     <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration" />-->
<!--     <rule ref="category/java/performance.xml/OptimizableToArrayCall" />-->
<!--     <rule ref="category/java/performance.xml/RedundantFieldInitializer" />-->
<!--     <rule ref="category/java/performance.xml/StringInstantiation" />-->
<!--     <rule ref="category/java/performance.xml/StringToString" />-->
<!-- &lt;!&ndash;    <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement" />&ndash;&gt;-->
<!--&lt;!&ndash;    <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector" />&ndash;&gt;-->
<!--    <rule ref="category/java/performance.xml/UseArraysAsList" />-->
<!--    <rule ref="category/java/performance.xml/UseIndexOfChar" />-->
<!--    <rule ref="category/java/performance.xml/UseIOStreamsWithApacheCommonsFileItem" />-->
<!--    <rule ref="category/java/performance.xml/UselessStringValueOf" />-->
<!--    <rule ref="category/java/performance.xml/UseStringBufferForStringAppends" />-->
<!--    <rule ref="category/java/performance.xml/UseStringBufferLength" />-->

<!--    &lt;!&ndash; Security Ruleset &ndash;&gt;-->
<!--    <rule ref="category/java/security.xml/HardCodedCryptoKey" />-->
<!--    <rule ref="category/java/security.xml/InsecureCryptoIv" />-->


</ruleset>